/* Generated by Yosys 0.9+4052 (git sha1 32a0ce9d, clang 12.0.0-1ubuntu1 -fPIC -Os) */

module AND2X1(A, B, Y);
  wire _0_;
  input A;
  input B;
  output Y;
  assign _0_ = A & B;
  assign Y = _0_;
endmodule

module AND2X2(A, B, Y);
  wire _0_;
  input A;
  input B;
  output Y;
  assign _0_ = A & B;
  assign Y = _0_;
endmodule

module AOI21X1(A, B, C, Y);
  wire _0_;
  wire _1_;
  wire _2_;
  input A;
  input B;
  input C;
  output Y;
  assign _0_ = ~_2_;
  assign _1_ = A & B;
  assign _2_ = _1_ | C;
  assign Y = _0_;
endmodule

module AOI22X1(A, B, C, D, Y);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  input A;
  input B;
  input C;
  input D;
  output Y;
  assign _0_ = ~_3_;
  assign _1_ = A & B;
  assign _2_ = C & D;
  assign _3_ = _1_ | _2_;
  assign Y = _0_;
endmodule

module BUFX2(A, Y);
  input A;
  output Y;
  assign Y = A;
endmodule

module BUFX4(A, Y);
  input A;
  output Y;
  assign Y = A;
endmodule

module CLKBUF1(A, Y);
  input A;
  output Y;
  assign Y = A;
endmodule

module CLKBUF2(A, Y);
  input A;
  output Y;
  assign Y = A;
endmodule

module CLKBUF3(A, Y);
  input A;
  output Y;
  assign Y = A;
endmodule

module DFFNEGX1(CLK, D, Q);
  wire _0_;
  input CLK;
  input D;
  reg DS0000;
  wire P0002;
  output Q;
  assign P0002 = ~DS0000;
  always @(negedge CLK)
    DS0000 <= D;
  assign _0_ = ~CLK;
  assign Q = DS0000;
endmodule

module DFFPOSX1(CLK, D, Q);
  input CLK;
  input D;
  reg DS0000;
  wire P0002;
  output Q;
  assign P0002 = ~DS0000;
  always @(posedge CLK)
    DS0000 <= D;
  assign Q = DS0000;
endmodule

module DFFSR(CLK, D, Q, R, S);
  wire _0_;
  wire _1_;
  input CLK;
  input D;
  reg P0002;
  wire P0003;
  output Q;
  input R;
  input S;
  assign P0003 = ~P0002;
  always @(posedge CLK, negedge S, negedge R)
    if (!R) P0002 <= 1'b0;
    else if (!S) P0002 <= 1'b1;
    else P0002 <= D;
  assign _0_ = ~R;
  assign _1_ = ~S;
  assign Q = P0002;
endmodule

module FAX1(A, B, C, YC, YS);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  input A;
  input B;
  input C;
  output YC;
  output YS;
  assign _00_ = A ^ B;
  assign _01_ = _00_ ^ C;
  assign _02_ = A & B;
  assign _03_ = B & C;
  assign _04_ = C & A;
  assign _05_ = _02_ | _03_;
  assign _06_ = _05_ | _04_;
  assign YC = _06_;
  assign YS = _01_;
endmodule

module HAX1(A, B, YC, YS);
  wire _0_;
  wire _1_;
  input A;
  input B;
  output YC;
  output YS;
  assign _0_ = A ^ B;
  assign _1_ = A & B;
  assign YC = _1_;
  assign YS = _0_;
endmodule

module INVX1(A, Y);
  wire _0_;
  input A;
  output Y;
  assign _0_ = ~A;
  assign Y = _0_;
endmodule

module INVX2(A, Y);
  wire _0_;
  input A;
  output Y;
  assign _0_ = ~A;
  assign Y = _0_;
endmodule

module INVX4(A, Y);
  wire _0_;
  input A;
  output Y;
  assign _0_ = ~A;
  assign Y = _0_;
endmodule

module INVX8(A, Y);
  wire _0_;
  input A;
  output Y;
  assign _0_ = ~A;
  assign Y = _0_;
endmodule

module LATCH(CLK, D, Q);
  input CLK;
  input D;
  reg DS0000;
  wire P0000;
  output Q;
  assign P0000 = ~DS0000;
  always @*
    if (CLK) DS0000 = D;
  assign Q = DS0000;
endmodule

module MUX2X1(A, B, S, Y);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  input A;
  input B;
  input S;
  output Y;
  assign _0_ = ~S;
  assign _1_ = ~_4_;
  assign _2_ = S & A;
  assign _3_ = _0_ & B;
  assign _4_ = _2_ | _3_;
  assign Y = _1_;
endmodule

module NAND2X1(A, B, Y);
  wire _0_;
  wire _1_;
  input A;
  input B;
  output Y;
  assign _0_ = ~_1_;
  assign _1_ = A & B;
  assign Y = _0_;
endmodule

module NAND3X1(A, B, C, Y);
  wire _0_;
  wire _1_;
  wire _2_;
  input A;
  input B;
  input C;
  output Y;
  assign _0_ = ~_2_;
  assign _1_ = A & B;
  assign _2_ = _1_ & C;
  assign Y = _0_;
endmodule

module NOR2X1(A, B, Y);
  wire _0_;
  wire _1_;
  input A;
  input B;
  output Y;
  assign _0_ = ~_1_;
  assign _1_ = A | B;
  assign Y = _0_;
endmodule

module NOR3X1(A, B, C, Y);
  wire _0_;
  wire _1_;
  wire _2_;
  input A;
  input B;
  input C;
  output Y;
  assign _0_ = ~_2_;
  assign _1_ = A | B;
  assign _2_ = _1_ | C;
  assign Y = _0_;
endmodule

module OAI21X1(A, B, C, Y);
  wire _0_;
  wire _1_;
  wire _2_;
  input A;
  input B;
  input C;
  output Y;
  assign _0_ = ~_1_;
  assign _1_ = _2_ & C;
  assign _2_ = A | B;
  assign Y = _0_;
endmodule

module OAI22X1(A, B, C, D, Y);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  input A;
  input B;
  input C;
  input D;
  output Y;
  assign _0_ = ~_1_;
  assign _1_ = _2_ & _3_;
  assign _2_ = A | B;
  assign _3_ = C | D;
  assign Y = _0_;
endmodule

module OR2X1(A, B, Y);
  wire _0_;
  input A;
  input B;
  output Y;
  assign _0_ = A | B;
  assign Y = _0_;
endmodule

module OR2X2(A, B, Y);
  wire _0_;
  input A;
  input B;
  output Y;
  assign _0_ = A | B;
  assign Y = _0_;
endmodule

module TBUFX1(A, EN, Y);
  wire _0_;
  input A;
  input EN;
  output Y;
  assign _0_ = ~A;
  assign Y = _0_;
endmodule

module TBUFX2(A, EN, Y);
  wire _0_;
  input A;
  input EN;
  output Y;
  assign _0_ = ~A;
  assign Y = _0_;
endmodule

module XNOR2X1(A, B, Y);
  wire _0_;
  wire _1_;
  input A;
  input B;
  output Y;
  assign _0_ = ~_1_;
  assign _1_ = A ^ B;
  assign Y = _0_;
endmodule

module XOR2X1(A, B, Y);
  wire _0_;
  input A;
  input B;
  output Y;
  assign _0_ = A ^ B;
  assign Y = _0_;
endmodule
